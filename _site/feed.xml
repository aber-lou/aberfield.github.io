<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Aberfield</title>
		<description>Stylish Jekyll Theme</description>
		<link>/</link>
		<atom:link href="/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>Effective Objective-C 2.0读书总结.</title>
				<description>&lt;h2 id=&quot;effective-objective-c-20读书笔记&quot;&gt;Effective Objective-C 2.0读书笔记&lt;/h2&gt;

&lt;p&gt;Effective Objective-C 2.0这本书买了将近一年了，始终没有花时间来看完，最近工作学习总是感觉肚子里面没啥东西，想来抽时间读完这本书，这里就对这本书稍微记记笔记，以后笔记好温习。&lt;/p&gt;
</description>
				<pubDate>Sun, 05 Mar 2017 00:00:00 +0800</pubDate>
				<link>/%E6%8A%80%E6%9C%AF/2017/03/05/Effective-Objective-C-2.0%E8%AF%BB%E4%B9%A6%E6%80%BB%E7%BB%93.html</link>
				<guid isPermaLink="true">/%E6%8A%80%E6%9C%AF/2017/03/05/Effective-Objective-C-2.0%E8%AF%BB%E4%B9%A6%E6%80%BB%E7%BB%93.html</guid>
			</item>
		
			<item>
				<title>UDP广播接受所遇到的一些问题.</title>
				<description>&lt;p&gt;UDP 广播所遇到的一些问题&lt;/p&gt;

&lt;p&gt;问题一.Error Domain=NSPOSIXErrorDomain Code=51 “Network is unreachable” UserInfo={NSLocalizedDescription=Network is unreachable, NSLocalizedFailureReason=Error in send() function.} 在9.0的5s上面报错
问题二.Error Domain=NSPOSIXErrorDomain Code=49 “Can’t assign requested address” UserInfo={NSLocalizedDescription=Can’t assign requested address, NSLocalizedFailureReason=Error in send() function.} 在10.2的6s上面报错&lt;/p&gt;

&lt;p&gt;我一直以为是10.2在网络限制的严格导致UDP广播发送不出去，但是加了一段百度请求的页面还是会出现这样的问题。&lt;/p&gt;

</description>
				<pubDate>Sat, 04 Mar 2017 00:00:00 +0800</pubDate>
				<link>/%E6%8A%80%E6%9C%AF/2017/03/04/%E5%85%B3%E4%BA%8EUDP%E5%B9%BF%E6%92%AD%E9%94%99%E8%AF%AF%E6%8F%90%E7%A4%BA.html</link>
				<guid isPermaLink="true">/%E6%8A%80%E6%9C%AF/2017/03/04/%E5%85%B3%E4%BA%8EUDP%E5%B9%BF%E6%92%AD%E9%94%99%E8%AF%AF%E6%8F%90%E7%A4%BA.html</guid>
			</item>
		
			<item>
				<title>Github Pages免费blog搭建，从这里重新开始.</title>
				<description>&lt;p&gt;程序猿交友网站Github是众所周知的，他可以提供我们代码托管，和各地程序猿协作开发，也是许多开源项目的聚集地。为了交友（技术知识分享），Github提供了一种功能叫做Github Pages，它可以让我们基于自己项目建立自己的网站，
这里就日常流水般的记录一下自己搭建的blogs。&lt;/p&gt;

&lt;p&gt;建立我们自己的网站的时候我们可以选取一些静态网站生成框架，这样可以自由的定制blog风格，而且很多工具可以在网上找到一堆的主题，选个中意的可以省去很多事情。看好的有两个框架&lt;a href=&quot;http://jekyll.com.cn&quot;&gt;Jekyll&lt;/a&gt;、&lt;a href=&quot;https://hexo.io&quot;&gt;Hexo&lt;/a&gt;,
两个的区别在于Jekyll基于Ruby环境，而Hexo基于NodeJs环境（其实Jekyll也是可以在本地直接预览的）。而我选择的是Jekyll，因为是用的Mac，mac自带Ruby环境，平时也用的多一点，安装Jekyll起来也比较方便（其实也是个巨坑），其实想想，我也早就装NodeJs环境的。当然也有
比较牛的，不用本地环境，直接将copy下来的主题一次改成自己喜欢的样式提交到Github上去，直接预览。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://pages.github.com&quot;&gt;Github Pages&lt;/a&gt;提供了一些简单的指引，你可以根据指引来做一个很简单的Hello World 页面。&lt;/p&gt;

&lt;p&gt;这个博客搭建可以有几种选择：
    &lt;br /&gt;1、完全定制自己的博客
    &lt;br /&gt;2、找一会你喜欢的框架，然后修改后使用
    &lt;br /&gt;3、在Github上Fork别人的Blog，然后添加文章&lt;/p&gt;

&lt;p&gt;这里选择的是第二种 博客主题选择的是&lt;a href=&quot;https://github.com/dbtek/dbyll&quot;&gt;dbyll&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;首先需要在Github首页上New 一个repository，名字尽可能取和Github userName一样的，如果不是，之后生成的链接会超长。创建完成之后Clone到本地文件就可以。接下来就需要我们配置Jekyll 环境了。&lt;/p&gt;

&lt;p&gt;打开终端，具体的命令如下&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;##查看ruby 版本，必须要在2.0.0之上才能安装Jekyll&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ruby&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;                                                                    
&lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ruby&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2014&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;revision&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;49005&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x86_64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;darwin14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;##如果ruby不够高，可以更新下&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;##安装jekyll&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jekyll&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;##安装成功之后，查看版本号&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jekyll&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;注意: 
    &lt;br /&gt;1、Operation not permitted（EI Capitan） 如果Mac系统是EI Capitan 并且ruby环境装在了root目录下，
    那需要关闭SIP保护，关闭它必须进入recover 模式（重启之后按住command+r），在工具中找到terminal执行csrutil disable命令，回车，然后重启，SIP保护就被关闭了。 
    &lt;br /&gt;2、ruby版本必须高于2.0.0。   如果ruby版本比较低 可以使用rvm 更新ruby版本&lt;a href=&quot;https://segmentfault.com/a/1190000003784636&quot;&gt;链接&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;如果Jekyll安装成功了，那现在就可以将本地的serve运行起来了
&lt;br /&gt;1、将dbyll这个工程down下来，拷贝到Github repoeitory的本地目录下 
&lt;br /&gt;2、安装bundle用来管理gem，gem install bundle
&lt;br /&gt;3、cd 到Clone的repository目录下，bundle install
&lt;br /&gt;4、启动服务 bundle exec jekyll serve&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;##安装成功之后，查看版本号&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bundler&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;##到博客目录下&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MyBlogs&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bundle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;install&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;##运行serve&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bundle&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jekyll&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serve&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;然后就可以以本地服务运行搭载dbyll这个静态网站了，地址一般为http://127.0.0.1:4000/ ,在网站里面很多内容都是定制好了，接下来感觉哪里不合适自己就改哪里了。文章路径是在_posts目录下，格式为md的，如果想布局好点可以稍微去看看markdown的语法，
很容易的。&lt;/p&gt;

&lt;p&gt;github+jekyll的工作机制
&lt;br /&gt;1、简单来说，当你访问你github上面http:user.github.io的时候，GitHub会使用jekyll解析username下面的username.github.io项目中，分支为master的源码，构建一个静态网站，并将生成的index.html展示出来。每一个账户名下都会有一个
GitHub分配的一个域名，同时每个项目下面也会有一个域名，这里就可以选择不同的分支来决定我们需要展现什么样子的网站。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;2、Jekyll 提供了插件功能，在网站源代码目录下，有一个名为 _plugins的目录， 你可以将一些插件放进去，这样，Jekyll在解析网站源代码时，就会运行你的插件， 这样插件是Ruby写成的。可以为Jekyll添加功能，例如，Jekyll默认是不提供分类 
页面的，你可以写一个插件，根据文章内容生成分类页面。如果没有插件，你只能每次写文章，添加分类时，为每个分类手动写HTML页面。在本地运行 Jekyll 时，这些插件会自动被调用，但是GitHub在解析网站源代码时， 出于安全考虑，会开启安全模式，禁用
这些插件，所以我们我们需要在本地用jekyll解析最终生成静态网站，提交到GitHub上。&lt;/p&gt;

&lt;p&gt;好吧 GitHub博客已经建立好了，接下来就是把自己以前记录在印象毕竟的东西整理挪过来了。&lt;/p&gt;

</description>
				<pubDate>Wed, 01 Mar 2017 00:00:00 +0800</pubDate>
				<link>/%E6%8A%80%E6%9C%AF/2017/03/01/%E5%85%B3%E4%BA%8EGithub-Pages-%E6%90%AD%E5%BB%BAblog.html</link>
				<guid isPermaLink="true">/%E6%8A%80%E6%9C%AF/2017/03/01/%E5%85%B3%E4%BA%8EGithub-Pages-%E6%90%AD%E5%BB%BAblog.html</guid>
			</item>
		
	</channel>
</rss>
